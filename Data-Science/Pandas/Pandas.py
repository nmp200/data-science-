{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {\n",
    "    'A': [1,2, np.nan],\n",
    "    'B':[5, np.nan, np.nan],\n",
    "    'C':[1,2,3]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  NaN  NaN  3"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## drop nan method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna??"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   C\n",
       "0  1\n",
       "1  2\n",
       "2  3"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## filling value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  NaN  NaN  3"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Filling Value</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Filling Value</td>\n",
       "      <td>Filling Value</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               A              B  C\n",
       "0              1              5  1\n",
       "1              2  Filling Value  2\n",
       "2  Filling Value  Filling Value  3"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.fillna(value = 'Filling Value')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = df['A'].fillna(value = df['A'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  NaN  NaN  3"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "1    2.0\n",
       "2    1.5\n",
       "Name: A, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  NaN  NaN  3"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "1    2.0\n",
       "2    1.5\n",
       "Name: A, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['A'].fillna(value = df['A'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  NaN  NaN  3"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.fillna??"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['A'].fillna(value = df['A'].mean(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A    B  C\n",
       "0  1.0  5.0  1\n",
       "1  2.0  NaN  2\n",
       "2  1.5  NaN  3"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Group By"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    'Company':['Google', 'Google', 'MSFT', 'FB','FB','IBM'],\n",
    "    'Person': ['Sam','Nihad','Any','Van','Rakib','Ovi'],\n",
    "    'Sales': [200, 120, 340, 124, 243, 350]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Person</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Google</td>\n",
       "      <td>Sam</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Google</td>\n",
       "      <td>Nihad</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>Any</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>FB</td>\n",
       "      <td>Van</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>FB</td>\n",
       "      <td>Rakib</td>\n",
       "      <td>243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>IBM</td>\n",
       "      <td>Ovi</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Company Person  Sales\n",
       "0  Google    Sam    200\n",
       "1  Google  Nihad    120\n",
       "2    MSFT    Any    340\n",
       "3      FB    Van    124\n",
       "4      FB  Rakib    243\n",
       "5     IBM    Ovi    350"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "byComp = df.groupby('Company')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Company</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>FB</td>\n",
       "      <td>183.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Google</td>\n",
       "      <td>160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>IBM</td>\n",
       "      <td>350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MSFT</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Sales\n",
       "Company       \n",
       "FB       183.5\n",
       "Google   160.0\n",
       "IBM      350.0\n",
       "MSFT     340.0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "byComp.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Company</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>FB</td>\n",
       "      <td>367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Google</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>IBM</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MSFT</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Sales\n",
       "Company       \n",
       "FB         367\n",
       "Google     320\n",
       "IBM        350\n",
       "MSFT       340"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "byComp.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Person</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Google</td>\n",
       "      <td>Sam</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Google</td>\n",
       "      <td>Nihad</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>Any</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>FB</td>\n",
       "      <td>Van</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>FB</td>\n",
       "      <td>Rakib</td>\n",
       "      <td>243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>IBM</td>\n",
       "      <td>Ovi</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Company Person  Sales\n",
       "0  Google    Sam    200\n",
       "1  Google  Nihad    120\n",
       "2    MSFT    Any    340\n",
       "3      FB    Van    124\n",
       "4      FB  Rakib    243\n",
       "5     IBM    Ovi    350"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Company</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>FB</td>\n",
       "      <td>84.145707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Google</td>\n",
       "      <td>56.568542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>IBM</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MSFT</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Sales\n",
       "Company           \n",
       "FB       84.145707\n",
       "Google   56.568542\n",
       "IBM            NaN\n",
       "MSFT           NaN"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "byComp.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Person</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>FB</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Google</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>IBM</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MSFT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Person  Sales\n",
       "Company               \n",
       "FB            2      2\n",
       "Google        2      2\n",
       "IBM           1      1\n",
       "MSFT          1      1"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Company').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Person</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Google</td>\n",
       "      <td>Sam</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Google</td>\n",
       "      <td>Nihad</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>Any</td>\n",
       "      <td>340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>FB</td>\n",
       "      <td>Van</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>FB</td>\n",
       "      <td>Rakib</td>\n",
       "      <td>243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>IBM</td>\n",
       "      <td>Ovi</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Company Person  Sales\n",
       "0  Google    Sam    200\n",
       "1  Google  Nihad    120\n",
       "2    MSFT    Any    340\n",
       "3      FB    Van    124\n",
       "4      FB  Rakib    243\n",
       "5     IBM    Ovi    350"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>FB</td>\n",
       "      <td>2.0</td>\n",
       "      <td>183.5</td>\n",
       "      <td>84.145707</td>\n",
       "      <td>124.0</td>\n",
       "      <td>153.75</td>\n",
       "      <td>183.5</td>\n",
       "      <td>213.25</td>\n",
       "      <td>243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Google</td>\n",
       "      <td>2.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>56.568542</td>\n",
       "      <td>120.0</td>\n",
       "      <td>140.00</td>\n",
       "      <td>160.0</td>\n",
       "      <td>180.00</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>IBM</td>\n",
       "      <td>1.0</td>\n",
       "      <td>350.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>350.0</td>\n",
       "      <td>350.00</td>\n",
       "      <td>350.0</td>\n",
       "      <td>350.00</td>\n",
       "      <td>350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MSFT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>340.0</td>\n",
       "      <td>340.00</td>\n",
       "      <td>340.0</td>\n",
       "      <td>340.00</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Sales                                                       \n",
       "        count   mean        std    min     25%    50%     75%    max\n",
       "Company                                                             \n",
       "FB        2.0  183.5  84.145707  124.0  153.75  183.5  213.25  243.0\n",
       "Google    2.0  160.0  56.568542  120.0  140.00  160.0  180.00  200.0\n",
       "IBM       1.0  350.0        NaN  350.0  350.00  350.0  350.00  350.0\n",
       "MSFT      1.0  340.0        NaN  340.0  340.00  340.0  340.00  340.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Company').describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merging, Joining and Concatenating"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concatenating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame(np.random.randint(1, 20, size = (4, 3)), [1,2,3,4], ['W', 'X', 'Y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.DataFrame(np.random.randint(20,40, size = (4, 3)), [5,6,7,8], ['W', 'X', 'Y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.DataFrame(np.random.randint(40,60, size = (4, 3)), [9,10,11,12], ['W', 'X', 'Y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    W   X   Y\n",
       "1   9  10  19\n",
       "2  14  15   8\n",
       "3   6  13   6\n",
       "4   4  11  14"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>32</td>\n",
       "      <td>26</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>35</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>23</td>\n",
       "      <td>27</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    W   X   Y\n",
       "5  32  26  24\n",
       "6  25  35  20\n",
       "7  29  36  25\n",
       "8  23  27  29"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>52</td>\n",
       "      <td>50</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>54</td>\n",
       "      <td>53</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>57</td>\n",
       "      <td>53</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>43</td>\n",
       "      <td>58</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     W   X   Y\n",
       "9   52  50  47\n",
       "10  54  53  40\n",
       "11  57  53  51\n",
       "12  43  58  47"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "farme = [df1, df2, df3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>32</td>\n",
       "      <td>26</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>35</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>36</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>23</td>\n",
       "      <td>27</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>52</td>\n",
       "      <td>50</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>54</td>\n",
       "      <td>53</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>57</td>\n",
       "      <td>53</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>43</td>\n",
       "      <td>58</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     W   X   Y\n",
       "1    9  10  19\n",
       "2   14  15   8\n",
       "3    6  13   6\n",
       "4    4  11  14\n",
       "5   32  26  24\n",
       "6   25  35  20\n",
       "7   29  36  25\n",
       "8   23  27  29\n",
       "9   52  50  47\n",
       "10  54  53  40\n",
       "11  57  53  51\n",
       "12  43  58  47"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat(farme)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>W</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       W     X     Y     W     X     Y     W     X     Y\n",
       "1    9.0  10.0  19.0   NaN   NaN   NaN   NaN   NaN   NaN\n",
       "2   14.0  15.0   8.0   NaN   NaN   NaN   NaN   NaN   NaN\n",
       "3    6.0  13.0   6.0   NaN   NaN   NaN   NaN   NaN   NaN\n",
       "4    4.0  11.0  14.0   NaN   NaN   NaN   NaN   NaN   NaN\n",
       "5    NaN   NaN   NaN  32.0  26.0  24.0   NaN   NaN   NaN\n",
       "6    NaN   NaN   NaN  25.0  35.0  20.0   NaN   NaN   NaN\n",
       "7    NaN   NaN   NaN  29.0  36.0  25.0   NaN   NaN   NaN\n",
       "8    NaN   NaN   NaN  23.0  27.0  29.0   NaN   NaN   NaN\n",
       "9    NaN   NaN   NaN   NaN   NaN   NaN  52.0  50.0  47.0\n",
       "10   NaN   NaN   NaN   NaN   NaN   NaN  54.0  53.0  40.0\n",
       "11   NaN   NaN   NaN   NaN   NaN   NaN  57.0  53.0  51.0\n",
       "12   NaN   NaN   NaN   NaN   NaN   NaN  43.0  58.0  47.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat(farme, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "left = {\n",
    "    'key':['k0','k1','k2','k3'],\n",
    "    'A':[10,20,30,40],\n",
    "    'B':[1,2,3,4]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "right = {\n",
    "    'key':['k0','k1','k2','k3'],\n",
    "    'C':[100,200,300,400],\n",
    "    'D':[11,12,13,14]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "left = pd.DataFrame(left)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "right = pd.DataFrame(right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k2</td>\n",
       "      <td>30</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k3</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  key   A  B\n",
       "0  k0  10  1\n",
       "1  k1  20  2\n",
       "2  k2  30  3\n",
       "3  k3  40  4"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "left"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k0</td>\n",
       "      <td>100</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k1</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k2</td>\n",
       "      <td>300</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k3</td>\n",
       "      <td>400</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  key    C   D\n",
       "0  k0  100  11\n",
       "1  k1  200  12\n",
       "2  k2  300  13\n",
       "3  k3  400  14"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "right"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k2</td>\n",
       "      <td>30</td>\n",
       "      <td>3</td>\n",
       "      <td>300</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k3</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>400</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  key   A  B    C   D\n",
       "0  k0  10  1  100  11\n",
       "1  k1  20  2  200  12\n",
       "2  k2  30  3  300  13\n",
       "3  k3  40  4  400  14"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.merge(left, right, on='key')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.merge??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Joining"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "left = {\n",
    "    'A':['A0','A1','A2'],\n",
    "    'B':['B0','B1','B2']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "right = {\n",
    "    'C':['C0','C2','C3'],\n",
    "    'D':['D0','D2','D3']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "left = pd.DataFrame(left, index = ['k0','k1','k2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "right = pd.DataFrame(right, index = ['k0','k2','k3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>k0</td>\n",
       "      <td>A0</td>\n",
       "      <td>B0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>k1</td>\n",
       "      <td>A1</td>\n",
       "      <td>B1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>k2</td>\n",
       "      <td>A2</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A   B\n",
       "k0  A0  B0\n",
       "k1  A1  B1\n",
       "k2  A2  B2"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "left"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>k0</td>\n",
       "      <td>C0</td>\n",
       "      <td>D0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>k2</td>\n",
       "      <td>C2</td>\n",
       "      <td>D2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>k3</td>\n",
       "      <td>C3</td>\n",
       "      <td>D3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     C   D\n",
       "k0  C0  D0\n",
       "k2  C2  D2\n",
       "k3  C3  D3"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "right"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>k0</td>\n",
       "      <td>A0</td>\n",
       "      <td>B0</td>\n",
       "      <td>C0</td>\n",
       "      <td>D0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>k2</td>\n",
       "      <td>A2</td>\n",
       "      <td>B2</td>\n",
       "      <td>C2</td>\n",
       "      <td>D2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A   B   C   D\n",
       "k0  A0  B0  C0  D0\n",
       "k2  A2  B2  C2  D2"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "left.join(right, how = 'inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "left.join??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\n",
    "    'col1':[444,555,666,444],\n",
    "    'col2':[1,2,3,4],\n",
    "    'col3':['abc','def','ghi','xyz']\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>444</td>\n",
       "      <td>1</td>\n",
       "      <td>abc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>555</td>\n",
       "      <td>2</td>\n",
       "      <td>def</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>666</td>\n",
       "      <td>3</td>\n",
       "      <td>ghi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>444</td>\n",
       "      <td>4</td>\n",
       "      <td>xyz</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1  col2 col3\n",
       "0   444     1  abc\n",
       "1   555     2  def\n",
       "2   666     3  ghi\n",
       "3   444     4  xyz"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([444, 555, 666], dtype=int64)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['col1'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['col1'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "444    2\n",
       "555    1\n",
       "666    1\n",
       "Name: col1, dtype: int64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['col1'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "def times2(x):\n",
    "    return 2*x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2\n",
       "1    4\n",
       "2    6\n",
       "3    8\n",
       "Name: col2, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['col2'].apply(times2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     1\n",
       "1     4\n",
       "2     9\n",
       "3    16\n",
       "Name: col2, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['col2'].apply(lambda x: x**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('SampleData.xlsx', sheet_name = 'SalesOrders')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-06</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>95</td>\n",
       "      <td>1.99</td>\n",
       "      <td>189.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-23</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Binder</td>\n",
       "      <td>50</td>\n",
       "      <td>19.99</td>\n",
       "      <td>999.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-09</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>36</td>\n",
       "      <td>4.99</td>\n",
       "      <td>179.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pen</td>\n",
       "      <td>27</td>\n",
       "      <td>19.99</td>\n",
       "      <td>539.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-15</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>56</td>\n",
       "      <td>2.99</td>\n",
       "      <td>167.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Binder</td>\n",
       "      <td>60</td>\n",
       "      <td>4.99</td>\n",
       "      <td>299.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2019-04-18</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>149.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>2019-05-05</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>90</td>\n",
       "      <td>4.99</td>\n",
       "      <td>449.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>2019-05-22</td>\n",
       "      <td>West</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>32</td>\n",
       "      <td>1.99</td>\n",
       "      <td>63.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>2019-06-08</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Binder</td>\n",
       "      <td>60</td>\n",
       "      <td>8.99</td>\n",
       "      <td>539.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>2019-06-25</td>\n",
       "      <td>Central</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>90</td>\n",
       "      <td>4.99</td>\n",
       "      <td>449.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>2019-07-12</td>\n",
       "      <td>East</td>\n",
       "      <td>Howard</td>\n",
       "      <td>Binder</td>\n",
       "      <td>29</td>\n",
       "      <td>1.99</td>\n",
       "      <td>57.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>2019-07-29</td>\n",
       "      <td>East</td>\n",
       "      <td>Parent</td>\n",
       "      <td>Binder</td>\n",
       "      <td>81</td>\n",
       "      <td>19.99</td>\n",
       "      <td>1619.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>35</td>\n",
       "      <td>4.99</td>\n",
       "      <td>174.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>2019-09-01</td>\n",
       "      <td>Central</td>\n",
       "      <td>Smith</td>\n",
       "      <td>Desk</td>\n",
       "      <td>2</td>\n",
       "      <td>125.00</td>\n",
       "      <td>250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>2019-09-18</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>16</td>\n",
       "      <td>15.99</td>\n",
       "      <td>255.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>2019-10-05</td>\n",
       "      <td>Central</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Binder</td>\n",
       "      <td>28</td>\n",
       "      <td>8.99</td>\n",
       "      <td>251.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>2019-10-22</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pen</td>\n",
       "      <td>64</td>\n",
       "      <td>8.99</td>\n",
       "      <td>575.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>2019-11-08</td>\n",
       "      <td>East</td>\n",
       "      <td>Parent</td>\n",
       "      <td>Pen</td>\n",
       "      <td>15</td>\n",
       "      <td>19.99</td>\n",
       "      <td>299.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>2019-11-25</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>96</td>\n",
       "      <td>4.99</td>\n",
       "      <td>479.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>2019-12-12</td>\n",
       "      <td>Central</td>\n",
       "      <td>Smith</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>67</td>\n",
       "      <td>1.29</td>\n",
       "      <td>86.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>2019-12-29</td>\n",
       "      <td>East</td>\n",
       "      <td>Parent</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>74</td>\n",
       "      <td>15.99</td>\n",
       "      <td>1183.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>2020-01-15</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Binder</td>\n",
       "      <td>46</td>\n",
       "      <td>8.99</td>\n",
       "      <td>413.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>Central</td>\n",
       "      <td>Smith</td>\n",
       "      <td>Binder</td>\n",
       "      <td>87</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1305.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>2020-02-18</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Binder</td>\n",
       "      <td>4</td>\n",
       "      <td>4.99</td>\n",
       "      <td>19.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>2020-03-07</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Binder</td>\n",
       "      <td>7</td>\n",
       "      <td>19.99</td>\n",
       "      <td>139.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>2020-03-24</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>50</td>\n",
       "      <td>4.99</td>\n",
       "      <td>249.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27</td>\n",
       "      <td>2020-04-10</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>66</td>\n",
       "      <td>1.99</td>\n",
       "      <td>131.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>East</td>\n",
       "      <td>Howard</td>\n",
       "      <td>Pen</td>\n",
       "      <td>96</td>\n",
       "      <td>4.99</td>\n",
       "      <td>479.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29</td>\n",
       "      <td>2020-05-14</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>53</td>\n",
       "      <td>1.29</td>\n",
       "      <td>68.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>2020-05-31</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Binder</td>\n",
       "      <td>80</td>\n",
       "      <td>8.99</td>\n",
       "      <td>719.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>2020-06-17</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Desk</td>\n",
       "      <td>5</td>\n",
       "      <td>125.00</td>\n",
       "      <td>625.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>2020-07-04</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>62</td>\n",
       "      <td>4.99</td>\n",
       "      <td>309.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>2020-07-21</td>\n",
       "      <td>Central</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>55</td>\n",
       "      <td>12.49</td>\n",
       "      <td>686.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>2020-08-07</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Pen Set</td>\n",
       "      <td>42</td>\n",
       "      <td>23.95</td>\n",
       "      <td>1005.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>2020-08-24</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Desk</td>\n",
       "      <td>3</td>\n",
       "      <td>275.00</td>\n",
       "      <td>825.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36</td>\n",
       "      <td>2020-09-10</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>7</td>\n",
       "      <td>1.29</td>\n",
       "      <td>9.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>2020-09-27</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pen</td>\n",
       "      <td>76</td>\n",
       "      <td>1.99</td>\n",
       "      <td>151.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>West</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>Binder</td>\n",
       "      <td>57</td>\n",
       "      <td>19.99</td>\n",
       "      <td>1139.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>14</td>\n",
       "      <td>1.29</td>\n",
       "      <td>18.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Binder</td>\n",
       "      <td>11</td>\n",
       "      <td>4.99</td>\n",
       "      <td>54.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>2020-12-04</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Binder</td>\n",
       "      <td>94</td>\n",
       "      <td>19.99</td>\n",
       "      <td>1879.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42</td>\n",
       "      <td>2020-12-21</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Binder</td>\n",
       "      <td>28</td>\n",
       "      <td>4.99</td>\n",
       "      <td>139.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    OrderDate   Region       Rep     Item  Units  Unit Cost    Total\n",
       "0  2019-01-06     East     Jones   Pencil     95       1.99   189.05\n",
       "1  2019-01-23  Central    Kivell   Binder     50      19.99   999.50\n",
       "2  2019-02-09  Central   Jardine   Pencil     36       4.99   179.64\n",
       "3  2019-02-26  Central      Gill      Pen     27      19.99   539.73\n",
       "4  2019-03-15     West   Sorvino   Pencil     56       2.99   167.44\n",
       "5  2019-04-01     East     Jones   Binder     60       4.99   299.40\n",
       "6  2019-04-18  Central   Andrews   Pencil     75       1.99   149.25\n",
       "7  2019-05-05  Central   Jardine   Pencil     90       4.99   449.10\n",
       "8  2019-05-22     West  Thompson   Pencil     32       1.99    63.68\n",
       "9  2019-06-08     East     Jones   Binder     60       8.99   539.40\n",
       "10 2019-06-25  Central    Morgan   Pencil     90       4.99   449.10\n",
       "11 2019-07-12     East    Howard   Binder     29       1.99    57.71\n",
       "12 2019-07-29     East    Parent   Binder     81      19.99  1619.19\n",
       "13 2019-08-15     East     Jones   Pencil     35       4.99   174.65\n",
       "14 2019-09-01  Central     Smith     Desk      2     125.00   250.00\n",
       "15 2019-09-18     East     Jones  Pen Set     16      15.99   255.84\n",
       "16 2019-10-05  Central    Morgan   Binder     28       8.99   251.72\n",
       "17 2019-10-22     East     Jones      Pen     64       8.99   575.36\n",
       "18 2019-11-08     East    Parent      Pen     15      19.99   299.85\n",
       "19 2019-11-25  Central    Kivell  Pen Set     96       4.99   479.04\n",
       "20 2019-12-12  Central     Smith   Pencil     67       1.29    86.43\n",
       "21 2019-12-29     East    Parent  Pen Set     74      15.99  1183.26\n",
       "22 2020-01-15  Central      Gill   Binder     46       8.99   413.54\n",
       "23 2020-02-01  Central     Smith   Binder     87      15.00  1305.00\n",
       "24 2020-02-18     East     Jones   Binder      4       4.99    19.96\n",
       "25 2020-03-07     West   Sorvino   Binder      7      19.99   139.93\n",
       "26 2020-03-24  Central   Jardine  Pen Set     50       4.99   249.50\n",
       "27 2020-04-10  Central   Andrews   Pencil     66       1.99   131.34\n",
       "28 2020-04-27     East    Howard      Pen     96       4.99   479.04\n",
       "29 2020-05-14  Central      Gill   Pencil     53       1.29    68.37\n",
       "30 2020-05-31  Central      Gill   Binder     80       8.99   719.20\n",
       "31 2020-06-17  Central    Kivell     Desk      5     125.00   625.00\n",
       "32 2020-07-04     East     Jones  Pen Set     62       4.99   309.38\n",
       "33 2020-07-21  Central    Morgan  Pen Set     55      12.49   686.95\n",
       "34 2020-08-07  Central    Kivell  Pen Set     42      23.95  1005.90\n",
       "35 2020-08-24     West   Sorvino     Desk      3     275.00   825.00\n",
       "36 2020-09-10  Central      Gill   Pencil      7       1.29     9.03\n",
       "37 2020-09-27     West   Sorvino      Pen     76       1.99   151.24\n",
       "38 2020-10-14     West  Thompson   Binder     57      19.99  1139.43\n",
       "39 2020-10-31  Central   Andrews   Pencil     14       1.29    18.06\n",
       "40 2020-11-17  Central   Jardine   Binder     11       4.99    54.89\n",
       "41 2020-12-04  Central   Jardine   Binder     94      19.99  1879.06\n",
       "42 2020-12-21  Central   Andrews   Binder     28       4.99   139.72"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-06</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>95</td>\n",
       "      <td>1.99</td>\n",
       "      <td>189.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-23</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Binder</td>\n",
       "      <td>50</td>\n",
       "      <td>19.99</td>\n",
       "      <td>999.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-09</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>36</td>\n",
       "      <td>4.99</td>\n",
       "      <td>179.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pen</td>\n",
       "      <td>27</td>\n",
       "      <td>19.99</td>\n",
       "      <td>539.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-15</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>56</td>\n",
       "      <td>2.99</td>\n",
       "      <td>167.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Binder</td>\n",
       "      <td>60</td>\n",
       "      <td>4.99</td>\n",
       "      <td>299.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2019-04-18</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>149.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>2019-05-05</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>90</td>\n",
       "      <td>4.99</td>\n",
       "      <td>449.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>2019-05-22</td>\n",
       "      <td>West</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>32</td>\n",
       "      <td>1.99</td>\n",
       "      <td>63.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>2019-06-08</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Binder</td>\n",
       "      <td>60</td>\n",
       "      <td>8.99</td>\n",
       "      <td>539.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate   Region       Rep    Item  Units  Unit Cost   Total\n",
       "0 2019-01-06     East     Jones  Pencil     95       1.99  189.05\n",
       "1 2019-01-23  Central    Kivell  Binder     50      19.99  999.50\n",
       "2 2019-02-09  Central   Jardine  Pencil     36       4.99  179.64\n",
       "3 2019-02-26  Central      Gill     Pen     27      19.99  539.73\n",
       "4 2019-03-15     West   Sorvino  Pencil     56       2.99  167.44\n",
       "5 2019-04-01     East     Jones  Binder     60       4.99  299.40\n",
       "6 2019-04-18  Central   Andrews  Pencil     75       1.99  149.25\n",
       "7 2019-05-05  Central   Jardine  Pencil     90       4.99  449.10\n",
       "8 2019-05-22     West  Thompson  Pencil     32       1.99   63.68\n",
       "9 2019-06-08     East     Jones  Binder     60       8.99  539.40"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>West</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>Binder</td>\n",
       "      <td>57</td>\n",
       "      <td>19.99</td>\n",
       "      <td>1139.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>14</td>\n",
       "      <td>1.29</td>\n",
       "      <td>18.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Binder</td>\n",
       "      <td>11</td>\n",
       "      <td>4.99</td>\n",
       "      <td>54.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>2020-12-04</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Binder</td>\n",
       "      <td>94</td>\n",
       "      <td>19.99</td>\n",
       "      <td>1879.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42</td>\n",
       "      <td>2020-12-21</td>\n",
       "      <td>Central</td>\n",
       "      <td>Andrews</td>\n",
       "      <td>Binder</td>\n",
       "      <td>28</td>\n",
       "      <td>4.99</td>\n",
       "      <td>139.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    OrderDate   Region       Rep    Item  Units  Unit Cost    Total\n",
       "38 2020-10-14     West  Thompson  Binder     57      19.99  1139.43\n",
       "39 2020-10-31  Central   Andrews  Pencil     14       1.29    18.06\n",
       "40 2020-11-17  Central   Jardine  Binder     11       4.99    54.89\n",
       "41 2020-12-04  Central   Jardine  Binder     94      19.99  1879.06\n",
       "42 2020-12-21  Central   Andrews  Binder     28       4.99   139.72"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['OrderDate', 'Region', 'Rep', 'Item', 'Units', 'Unit Cost', 'Total'], dtype='object')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['OrderDate', 'Region', 'Rep', 'Item', 'Units', 'Unit Cost', 'Total']"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 43 entries, 0 to 42\n",
      "Data columns (total 7 columns):\n",
      "OrderDate    43 non-null datetime64[ns]\n",
      "Region       43 non-null object\n",
      "Rep          43 non-null object\n",
      "Item         43 non-null object\n",
      "Units        43 non-null int64\n",
      "Unit Cost    43 non-null float64\n",
      "Total        43 non-null float64\n",
      "dtypes: datetime64[ns](1), float64(2), int64(1), object(3)\n",
      "memory usage: 2.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderDate    43\n",
       "Region        3\n",
       "Rep          11\n",
       "Item          5\n",
       "Units        37\n",
       "Unit Cost    12\n",
       "Total        41\n",
       "dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-06</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>95</td>\n",
       "      <td>1.99</td>\n",
       "      <td>189.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-23</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Binder</td>\n",
       "      <td>50</td>\n",
       "      <td>19.99</td>\n",
       "      <td>999.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-09</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>36</td>\n",
       "      <td>4.99</td>\n",
       "      <td>179.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pen</td>\n",
       "      <td>27</td>\n",
       "      <td>19.99</td>\n",
       "      <td>539.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-15</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>56</td>\n",
       "      <td>2.99</td>\n",
       "      <td>167.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate   Region      Rep    Item  Units  Unit Cost   Total\n",
       "0 2019-01-06     East    Jones  Pencil     95       1.99  189.05\n",
       "1 2019-01-23  Central   Kivell  Binder     50      19.99  999.50\n",
       "2 2019-02-09  Central  Jardine  Pencil     36       4.99  179.64\n",
       "3 2019-02-26  Central     Gill     Pen     27      19.99  539.73\n",
       "4 2019-03-15     West  Sorvino  Pencil     56       2.99  167.44"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['20% Dis'] = df['Total'].apply(lambda x: x*(20/100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "      <th>20% Dis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-06</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>95</td>\n",
       "      <td>1.99</td>\n",
       "      <td>189.05</td>\n",
       "      <td>37.810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-23</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Binder</td>\n",
       "      <td>50</td>\n",
       "      <td>19.99</td>\n",
       "      <td>999.50</td>\n",
       "      <td>199.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-09</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>36</td>\n",
       "      <td>4.99</td>\n",
       "      <td>179.64</td>\n",
       "      <td>35.928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pen</td>\n",
       "      <td>27</td>\n",
       "      <td>19.99</td>\n",
       "      <td>539.73</td>\n",
       "      <td>107.946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-15</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>56</td>\n",
       "      <td>2.99</td>\n",
       "      <td>167.44</td>\n",
       "      <td>33.488</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate   Region      Rep    Item  Units  Unit Cost   Total  20% Dis\n",
       "0 2019-01-06     East    Jones  Pencil     95       1.99  189.05   37.810\n",
       "1 2019-01-23  Central   Kivell  Binder     50      19.99  999.50  199.900\n",
       "2 2019-02-09  Central  Jardine  Pencil     36       4.99  179.64   35.928\n",
       "3 2019-02-26  Central     Gill     Pen     27      19.99  539.73  107.946\n",
       "4 2019-03-15     West  Sorvino  Pencil     56       2.99  167.44   33.488"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Payment'] = df['Total'] - df['20% Dis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OrderDate</th>\n",
       "      <th>Region</th>\n",
       "      <th>Rep</th>\n",
       "      <th>Item</th>\n",
       "      <th>Units</th>\n",
       "      <th>Unit Cost</th>\n",
       "      <th>Total</th>\n",
       "      <th>20% Dis</th>\n",
       "      <th>Payment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-06</td>\n",
       "      <td>East</td>\n",
       "      <td>Jones</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>95</td>\n",
       "      <td>1.99</td>\n",
       "      <td>189.05</td>\n",
       "      <td>37.810</td>\n",
       "      <td>151.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-23</td>\n",
       "      <td>Central</td>\n",
       "      <td>Kivell</td>\n",
       "      <td>Binder</td>\n",
       "      <td>50</td>\n",
       "      <td>19.99</td>\n",
       "      <td>999.50</td>\n",
       "      <td>199.900</td>\n",
       "      <td>799.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-02-09</td>\n",
       "      <td>Central</td>\n",
       "      <td>Jardine</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>36</td>\n",
       "      <td>4.99</td>\n",
       "      <td>179.64</td>\n",
       "      <td>35.928</td>\n",
       "      <td>143.712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-02-26</td>\n",
       "      <td>Central</td>\n",
       "      <td>Gill</td>\n",
       "      <td>Pen</td>\n",
       "      <td>27</td>\n",
       "      <td>19.99</td>\n",
       "      <td>539.73</td>\n",
       "      <td>107.946</td>\n",
       "      <td>431.784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-03-15</td>\n",
       "      <td>West</td>\n",
       "      <td>Sorvino</td>\n",
       "      <td>Pencil</td>\n",
       "      <td>56</td>\n",
       "      <td>2.99</td>\n",
       "      <td>167.44</td>\n",
       "      <td>33.488</td>\n",
       "      <td>133.952</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OrderDate   Region      Rep    Item  Units  Unit Cost   Total  20% Dis  \\\n",
       "0 2019-01-06     East    Jones  Pencil     95       1.99  189.05   37.810   \n",
       "1 2019-01-23  Central   Kivell  Binder     50      19.99  999.50  199.900   \n",
       "2 2019-02-09  Central  Jardine  Pencil     36       4.99  179.64   35.928   \n",
       "3 2019-02-26  Central     Gill     Pen     27      19.99  539.73  107.946   \n",
       "4 2019-03-15     West  Sorvino  Pencil     56       2.99  167.44   33.488   \n",
       "\n",
       "   Payment  \n",
       "0  151.240  \n",
       "1  799.600  \n",
       "2  143.712  \n",
       "3  431.784  \n",
       "4  133.952  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAswAAAFlCAYAAAD/Kr6hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdaZRb53kn+P+LfasCamcVKZKiREpeJMsStdiyLCpuO467p53MmelInsR2YltJx/kwyXyY5PTp4z49x3N6ZronHXc6TkuJ4qTjJVs78XScxY5FOY65iFosS7JIcRXJ2oEqrIV7cYF3Ptz7olA7gHsvgAv8f+fwkESBxUupCnjw4P8+j5BSgoiIiIiItufr9gUQEREREfUyFsxERERERLtgwUxEREREtAsWzEREREREu2DBTERERES0CxbMRERERES7CHT7AvYyPj4uDx8+3O3LICIiIqI+9sILLyxLKSe2+1jPF8yHDx/GuXPnun0ZRERERNTHhBDXdvoYIxlERERERLtgwUxEREREtAsWzEREREREu2DBTERERES0CxbMRERERES7YMFMRERERLQLFsxERERERLtgwUxEREREtAsWzEREREREu2DBTERERES0CxbMRERERES7YMFMRERERI4pV6p4K13q9mU4igUzERERETnmy2fewod/87uoVGvdvhTHsGAmIiIiIscs5Moo6VUUNaPbl+IYFsxERERE5BhVKOfLLJiJiIiIiLZQBXNRZ8FMRERERLRFQauaP7PDTERERES0leowF5hhJiIiIiLaSkUxilanuR+wYCYiIiIix6x3mCtdvhLnsGAmIiIiIseoznKBHWYiIiIioq3qHWYe+iMiIiIi2khKuZ5h5lg5IiIiIqKN1ipV1KT5ay4uISIiIiLapHGUHFdjExERERFtUmo46MeCmYiIiIhok8YOc54FMxERERHRRqqrHAn62GEmIiIiItpMTcaYGo4M1mpsIcQzQohFIcSrDbf9sRDiZevHVSHEy9bth4UQaw0f+52GP3OfEOKHQoiLQogvCCGEO/8kIiIiIuoGtaxkaigycB3mLwH4cOMNUsqfllLeI6W8B8CfA/hvDR++pD4mpfzFhtu/COBJAEetHxs+JxERERF5W8kqkieHw4M1Vk5K+V0Ame0+ZnWJ/wWAr+72OYQQ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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (12,6))\n",
    "plt.plot(df['OrderDate'], df['Total'])\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
